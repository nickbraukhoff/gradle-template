apply plugin: "checkstyle"
apply plugin: "findbugs"
apply plugin: 'pmd'
apply plugin: 'net.saliman.cobertura'
apply plugin: 'sonar-runner'

def mainSource = 'src/main/java';
def testSource = 'src/test/java';

sourceSets {
    generated {
        java {
            srcDirs = [
                    "$buildDir/classes/generated"
            ]
        }
    }
}

sonarRunner {
    sonarProperties {
        property "sonar.host.url", ""
        property "sonar.jdbc.url", "jdbc:mysql://"
        property "sonar.jdbc.driverClassName", "com.mysql.jdbc.Driver"
        property "sonar.jdbc.username", "sonar"
        property "sonar.jdbc.password", "sonar"
        property "sonar.cobertura.reportPath", file("$project.buildDir/reports/cobertura/coverage.xml")
        property "sonar.profile", "Sonar way with Findbugs"
    }
}
/*
configurations {
    codeStandards
}

dependencies {
    codeStandards(libs.) {
        exclude group: "xerces"
        exclude group: "xalan"
        exclude group: "org.apache", module: "log4j"
    }
}

task unjarCodingStandards(type: Copy, description: "Unzip and setup coding standards rules") {

    from zipTree(file(configurations.codeStandards.find { it.name.contains("services-coding-standards") }))
    into file("${buildDir}/codingstandards")
}

checkstyle {
    configFile = file("${buildDir}/codingstandards/checkstyle/checkstyle.xml")
    ignoreFailures = true
}
checkstyleMain.source = mainSource


checkstyleTest.source = testSource

findbugs {
    toolVersion = "2.0.1"
    includeFilter = file("${buildDir}/codingstandards/findbugs/filter.xml")
    effort = "max"
    sourceSets = [sourceSets.main]
    reportLevel = "high"
    ignoreFailures = true
}
findbugsMain.source = mainSource

findbugsTest.source = testSource

pmd {
    toolVersion = "5.1.3"
    ruleSets = ["java-basic", "java-braces"]
//    ruleSetFiles = files("${buildDir}")
    ignoreFailures = true
}
pmdMain.source = mainSource

pmdTest.source = testSource

cobertura {
    coverageFormats = ['html', 'xml']
    coverageDirs << file("$buildDir/classes/main")
}

tasks.withType(Checkstyle) { it.dependsOn unjarCodingStandards }
tasks.withType(FindBugs) { it.dependsOn unjarCodingStandards }
tasks.withType(Pmd) { it.dependsOn unjarCodingStandards }
*/


